
import './App.css';
import React, { useEffect, useRef, useState } from "react";
import { Editor } from '@tinymce/tinymce-react';
import socketIOClient from "socket.io-client";
//const ENDPOINT = "http://127.0.0.1:1337";
const ENDPOINT = "https://jsramverk-editor-jopt19.azurewebsites.net";

const socket = socketIOClient(ENDPOINT);


class ToolbarClass extends React.Component {
    
    constructor(props) {
        super(props);
        //creates variables needed, use this.state.variable
        this.state = {
            content: "",
            error: "",
            items: "",
            item: "",
            name: "",
            user: this.props.user,
            token: this.props.token
        }
        //const user = this.props.user;
        //const token = this.props.token;

        // make this.setState available in function
        this.log = this.log.bind(this)
        this.createNewDoc = this.createNewDoc.bind(this)
        this.updateDoc = this.updateDoc.bind(this)
        this.myContentChangeHandler = this.myContentChangeHandler.bind(this)
        this.myNameChangeHandler = this.myNameChangeHandler.bind(this)

        socket.on("doc", (data) => {
            if (editorRef.current) {
              editorRef.current.setContent(data.content);
            }
          });
        
    }
    
    log() {
        let myContent = "";
        if (editorRef.current) {
          console.log(editorRef.current.getContent());
          myContent = editorRef.current.getContent();
        }
        return myContent;
    };

    getUsersDocs() {
        let body = {
            "user": this.state.user
        }
        //let url = "https://jsramverk-editor-jopt19.azurewebsites.net/userDocs"
        let url = "http://localhost:1337/userDocs"
        fetch(url, {
            method: 'POST',
            headers: {"Content-type": 'application/json', "x-access-token": this.state.token},
            body: JSON.stringify(body)
        }).then(res => res.json())
		.then(
          (result) => {
			console.log(result)
            if (result.errors) {
              	alert(result.errors.title)
          	} else if (result.userDocs) {
            	setIsLoaded(true);
            	setItems(result);
        	} else {
				//alert(error)
				setError(error);
			}
      },
      (error) => {
        setIsLoaded(true);
        setError(error);
      }
    )}


    createNewDoc() {
        let body = {
              "content": this.state.content,
              "name": this.state.name,
              "valid_users": [user, "admin@admin.se"]
        }
        //let url = "https://jsramverk-editor-jopt19.azurewebsites.net/editor"
        let url = "http://localhost:1337/editor"
        fetch(url, {
            method: 'POST',
            headers: {"Content-type": 'application/json', "x-access-token": this.state.token},
            body: JSON.stringify(body)
        }).then(response => {
          	alert("Document created")
			getUsersDocs()
			
          	response.json(204)
        })
    }

    myNameChangeHandler(event) {
        setState({name: event.target.value});
    }

    myContentChangeHandler() {
      // onChange letar efter event, t.ex enter fungerar.
        var EditorContent = editorRef.current.getContent()
        setState({content: EditorContent});
        let body = {
          "id": this.state.item._id,
          "content": this.state.content,
          "name": this.state.name
        }
        socket.emit("doc", body);  
    }

    updateDoc() {
        let body = {
            "id": this.state.item._id,
            "content": this.state.content,
            "name": this.state.name,
            "valid_users": [this.state.user, "admin@admin.se"]
        }
        fetch("https://jsramverk-editor-jopt19.azurewebsites.net/editor", {
            method: 'PUT',
            body: JSON.stringify(body),
            headers: {"Content-type": 'application/json', "x-access-token": this.state.token},
        }).then(response => {
        })
    }

    getOneDoc(id){
        fetch("https://jsramverk-editor-jopt19.azurewebsites.net/editor/" + id)
          .then(res => res.json())
          .then(
            (result) => {
              socket.emit("create", id);
              setIsLoaded(true);
              console.log(result.name)
              setName({name: result.name});
              setItem(result);
            },
            (error) => {
              setIsLoaded(true);
              setError(error);
            }
          )
    }
    render() {
        if (this.state.items.length > 0) {
            return (
				<>
					{/**Toolbar buttons*/}
					
					<h2 data-testid="redigera">Redigera dokument: </h2>
					
					{this.state.items.map((data, key) => {
				  return (
					  <div key={key}>
						  <button onClick={() => getOneDoc(data._id)}>{data.name}</button>
					  </div>
				  );
				})}     <label>Namn: </label>
							<input type="text"
							name="nameArea"
							placeholder={this.state.item.name}
							onChange={this.myNameChangeHandler}
							/>
						
						<input type="button" data-testid="save" value="Spara" className="toolbar" onClick={this.log}/>
						<input type="button" data-testid="update" value="Uppdatera" className="toolbar" onClick={this.updateDoc}/>
						<input type="button" data-testid="create" value="Skapa" className="toolbar" onClick={this.createNewDoc}/>
						{/**<input type="button" value="Ta bort" className="toolbar" onClick={deleteDoc}/>*/}
					
					  <Editor
					   apiKey='epvu53yulqfg70pfagqhz9nm0914ws2h220hgu39cnwkwnxb'
						onInit={(evt, editor) => this.editorRef.current = editor}
						initialValue={this.state.item.content}
						onChange={this.myContentChangeHandler}
						init={{
						  height: 500,
						  menubar: false,
						  plugins: [
							'advlist autolink lists link image charmap print preview anchor',
							'searchreplace visualblocks code fullscreen',
							'insertdatetime media table paste code help wordcount'
						  ],
						  toolbar: 'undo redo | formatselect | ' +
						  'bold italic backcolor | alignleft aligncenter ' +
						  'alignright alignjustify | bullist numlist outdent indent | ' +
						  'removeformat | help',
						  content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
						}}
						
					/>
				</>
			  );
        }
        return (
            <>
                {/**Toolbar buttons*/}
                   <label>Namn: </label>
                        <input type="text"
                        name="nameArea"
                        placeholder={this.state.item.name}
                        onChange={this.myNameChangeHandler}
                        />
                    
                    <input type="button" data-testid="save" value="Spara" className="toolbar" onClick={this.log}/>
                    <input type="button" data-testid="update" value="Uppdatera" className="toolbar" onClick={this.updateDoc}/>
                    <input type="button" data-testid="create" value="Skapa" className="toolbar" onClick={this.createNewDoc}/>
                    {/**<input type="button" value="Ta bort" className="toolbar" onClick={deleteDoc}/>*/}
                
                  <Editor
                   apiKey='epvu53yulqfg70pfagqhz9nm0914ws2h220hgu39cnwkwnxb'
                    onInit={(evt, editor) => this.editorRef.current = editor}
                    initialValue={item.content}
                    onChange={this.myContentChangeHandler}
                    init={{
                      height: 500,
                      menubar: false,
                      plugins: [
                        'advlist autolink lists link image charmap print preview anchor',
                        'searchreplace visualblocks code fullscreen',
                        'insertdatetime media table paste code help wordcount'
                      ],
                      toolbar: 'undo redo | formatselect | ' +
                      'bold italic backcolor | alignleft aligncenter ' +
                      'alignright alignjustify | bullist numlist outdent indent | ' +
                      'removeformat | help',
                      content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
                    }}
                    
                />
            </>
          );
    }
}

export {ToolbarClass};